" Configuration file for vim

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing

set wildmenu                " Autocomplete preview
set wildmode=longest:full   " Complete to longest common completion

filetype plugin indent on

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup
syntax on "enables syntax highlighting
set nu "enables line numbers

" sets \t length to 4 spaces
set tabstop=4 
" sets the tab key to input 4 spaces and backspace to remove 4
set softtabstop=4
" handle double indentation
set shiftwidth=4
set expandtab "Tabs become spaces

" in .asm, set 8 space tabs and a line length warning for COCS
autocmd FileType asm setlocal tabstop=8 softtabstop=8 shiftwidth=8 colorcolumn=80

" in makefiles, don't expand tabs to spaces,
" since actual tab characters are needed
autocmd FileType make setlocal noexpandtab shiftwidth=8 softtabstop=0

" in javascript, set 2 space tabs
autocmd FileType javascript setlocal tabstop=2 softtabstop=2 shiftwidth=2 colorcolumn=80

" enable spellcheck for mostly text filetypes
autocmd FileType latex,tex,markdown,md,text,gitcommit setlocal spell

" move vertically by visual line
nnoremap j gj 
nnoremap k gk
vnoremap j gj 
vnoremap k gk

"remap B and E to move to beginning/end of line, and unbind the original keys
nnoremap B ^
nnoremap E $
vnoremap B ^
vnoremap E $

nnoremap $ <nop>
nnoremap ^ <nop>
vnoremap $ <nop>
vnoremap ^ <nop>

color slate

" Show nonprinting charachters
" set list

" Pulled from /usr/share/vim/vim81/defaults.vim on arch
"
" Only do this part when Vim was compiled with the +eval feature.
if 1

  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimStartup | au! | augroup END"
  augroup vimStartup
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

  augroup END

endif

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif


" Plugin config
"
" Lightline
set laststatus=2 
set noshowmode      " We don't need to show --INSERT--, since lightline shows it
set ttimeoutlen=50  " Faster updating

" AutoPairs
let g:AutoPairsFlyMode = 1 " Enable fly mode

" Rainbow parentheses
let g:rainbow_active = 1

" HowMuch
"The floating point size of the result:
let g:HowMuch_scale = 9 
"the engine order for auto-calculation
let g:HowMuch_auto_engines = ['py', 'vim', 'bc']
